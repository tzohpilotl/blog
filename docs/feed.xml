<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="http://localhost:4000/blog/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/blog/" rel="alternate" type="text/html" /><updated>2022-03-13T09:27:17-06:00</updated><id>http://localhost:4000/blog/feed.xml</id><title type="html">Notes On Programming</title><subtitle>Some notes about programming.</subtitle><entry><title type="html">Unit Tests In React</title><link href="http://localhost:4000/blog/2022/03/10/unit-tests-in-react.html" rel="alternate" type="text/html" title="Unit Tests In React" /><published>2022-03-10T00:00:00-06:00</published><updated>2022-03-10T00:00:00-06:00</updated><id>http://localhost:4000/blog/2022/03/10/unit-tests-in-react</id><content type="html" xml:base="http://localhost:4000/blog/2022/03/10/unit-tests-in-react.html">&lt;div id=&quot;outline-container-org453b9f2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org453b9f2&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;1.&lt;/span&gt; Context&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orgf9c26d9&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;orgf9c26d9&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;1.1.&lt;/span&gt; Unit Tests Benefits&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-1&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;Ensure code correctness at the lowest level&lt;/li&gt;
&lt;li&gt;Prevents bug regressions&lt;/li&gt;
&lt;li&gt;Makes code coverage look cool ðŸ˜Ž&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;NOTES&quot; id=&quot;orgd3ed24f&quot;&gt;
&lt;p&gt;
Unit testing is the first tool programmers have to ensure the correctness of
their programs.
&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orgfad3806&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;orgfad3806&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;1.2.&lt;/span&gt; Unit Tests Definition&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-2&quot;&gt;
&lt;p&gt;
What makes a unit test a unit test is its scope:
&lt;/p&gt;

&lt;p&gt;
Unit tests should only test one unit a time.
&lt;/p&gt;
&lt;div class=&quot;NOTES&quot; id=&quot;orgfb34502&quot;&gt;
&lt;p&gt;
A unit is a diffuse term but it usually refers to a function or a class. A good
unit test proves the outcome of the unit under test is correct for all it&apos;s
logic branches, and for the relevant inputs. Fortunately, reaping the benefits
of unit testing is not hard because the latest developments in technology make
writing unit tests easy.
&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org6b32517&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org6b32517&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;2.&lt;/span&gt; Unit Tests Scope In React&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;Keep in mind the React component ultimate purpose: to generate HTML code&lt;/li&gt;
&lt;li&gt;A component is a unit&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;NOTES&quot; id=&quot;org6352157&quot;&gt;
&lt;p&gt;
As in every kind application, React apps benefit from having unit tests, but
they come with their own set of complications. What&apos;s generally accepted though,
is that a React component, especially if it&apos;s simple as in markup-only
components, but even if it&apos;s complex, with state management, children, and
network calls, is an unit. With the exception of higher-order-components,
something we should always keep in mind while testing is a component&apos;s
fundamental &lt;i&gt;purpose&lt;/i&gt;: to generate HTML code. This means that all that state
handling, network calling, and children bearing, will ultimately result in a
tree of HTML tags ready to be rendered by the browser.
&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org5e62351&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org5e62351&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;3.&lt;/span&gt; Testing State vs Testing Outcomes&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;
&lt;p&gt;
When developing unit tests there are two common approaches:
Testing state and testing outcomes.
&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orgfa12d01&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;orgfa12d01&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;3.1.&lt;/span&gt; Testing A Unit&apos;s State&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-3-1&quot;&gt;
&lt;p&gt;
Testing state is the practice of querying the state of the unit at a given
moment of time. In React, this can be seen in tests that assert the props and/or
the state of the component is what we expect it to be at interesting points in
time, for example, when a component is rendered for the first time, or when a
button has been clicked.
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-js&quot;&gt;&lt;span style=&quot;color: #4f97d7; font-weight: bold;&quot;&gt;const&lt;/span&gt; &lt;span style=&quot;color: #7590db;&quot;&gt;assert&lt;/span&gt; = require&lt;span style=&quot;color: #4f97d7;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #2d9574;&quot;&gt;&apos;assert/strict&apos;&lt;/span&gt;&lt;span style=&quot;color: #4f97d7;&quot;&gt;)&lt;/span&gt;;

&lt;span style=&quot;color: #4f97d7; font-weight: bold;&quot;&gt;function&lt;/span&gt; &lt;span style=&quot;color: #bc6ec5; font-weight: bold;&quot;&gt;createCounter&lt;/span&gt;&lt;span style=&quot;color: #4f97d7;&quot;&gt;()&lt;/span&gt; &lt;span style=&quot;color: #4f97d7;&quot;&gt;{&lt;/span&gt;
    &lt;span style=&quot;color: #4f97d7; font-weight: bold;&quot;&gt;let&lt;/span&gt; &lt;span style=&quot;color: #7590db;&quot;&gt;state&lt;/span&gt; = &lt;span style=&quot;color: #bc6ec5;&quot;&gt;{&lt;/span&gt; count: &lt;span style=&quot;color: #a45bad;&quot;&gt;0&lt;/span&gt; &lt;span style=&quot;color: #bc6ec5;&quot;&gt;}&lt;/span&gt;;
    &lt;span style=&quot;color: #4f97d7; font-weight: bold;&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #bc6ec5;&quot;&gt;{&lt;/span&gt;
        state,
        onClick&lt;span style=&quot;color: #2d9574;&quot;&gt;()&lt;/span&gt; &lt;span style=&quot;color: #2d9574;&quot;&gt;{&lt;/span&gt;
            state.count += &lt;span style=&quot;color: #a45bad;&quot;&gt;1&lt;/span&gt;;
        &lt;span style=&quot;color: #2d9574;&quot;&gt;}&lt;/span&gt;,
        render&lt;span style=&quot;color: #2d9574;&quot;&gt;()&lt;/span&gt; &lt;span style=&quot;color: #2d9574;&quot;&gt;{&lt;/span&gt;
            &lt;span style=&quot;color: #4f97d7; font-weight: bold;&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #2d9574;&quot;&gt;`&amp;lt;p&amp;gt;Clicked ${state.count}&amp;lt;/p&amp;gt;`&lt;/span&gt;;
        &lt;span style=&quot;color: #2d9574;&quot;&gt;}&lt;/span&gt;,
    &lt;span style=&quot;color: #bc6ec5;&quot;&gt;}&lt;/span&gt;;
&lt;span style=&quot;color: #4f97d7;&quot;&gt;}&lt;/span&gt;

&lt;span style=&quot;color: #4f97d7; font-weight: bold;&quot;&gt;const&lt;/span&gt; &lt;span style=&quot;color: #7590db;&quot;&gt;counter&lt;/span&gt; = createCounter&lt;span style=&quot;color: #4f97d7;&quot;&gt;()&lt;/span&gt;;

assert.equal&lt;span style=&quot;color: #4f97d7;&quot;&gt;(&lt;/span&gt;counter.state.count, &lt;span style=&quot;color: #a45bad;&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color: #4f97d7;&quot;&gt;)&lt;/span&gt;;

counter.onClick&lt;span style=&quot;color: #4f97d7;&quot;&gt;()&lt;/span&gt;;

assert.equal&lt;span style=&quot;color: #4f97d7;&quot;&gt;(&lt;/span&gt;counter.state.count, &lt;span style=&quot;color: #a45bad;&quot;&gt;1&lt;/span&gt;&lt;span style=&quot;color: #4f97d7;&quot;&gt;)&lt;/span&gt;;
&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;NOTES&quot; id=&quot;org593e195&quot;&gt;
&lt;p&gt;
My guess is we do this because when we debug we usually make sure the state is
correct step by step during the execution of our program.
&lt;/p&gt;

&lt;p&gt;
What happens if we change the type of &lt;code&gt;state.count&lt;/code&gt;?
What happens if we change &lt;code&gt;state.count&lt;/code&gt; for &lt;code&gt;state.clicks&lt;/code&gt;?
What happens if we pass the count as parameter (prop) instead of storing it as
state?
What happens if we change the word &quot;Clicked&quot; for &quot;Clidkec&quot; in the render method?
&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org24643c6&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org24643c6&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;3.2.&lt;/span&gt; Testing A Unit&apos;s Purpose&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-3-2&quot;&gt;
&lt;p&gt;
Testing outcomes refers to the practice of testing a unit delivers the outcomes
it&apos;s designed to deliver. In React, this means we should test a component
delivers the desired HTML code given a known context.
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-js&quot;&gt;&lt;span style=&quot;color: #4f97d7; font-weight: bold;&quot;&gt;const&lt;/span&gt; &lt;span style=&quot;color: #7590db;&quot;&gt;assert&lt;/span&gt; = require&lt;span style=&quot;color: #4f97d7;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #2d9574;&quot;&gt;&apos;assert/strict&apos;&lt;/span&gt;&lt;span style=&quot;color: #4f97d7;&quot;&gt;)&lt;/span&gt;;

&lt;span style=&quot;color: #4f97d7; font-weight: bold;&quot;&gt;function&lt;/span&gt; &lt;span style=&quot;color: #bc6ec5; font-weight: bold;&quot;&gt;createCounter&lt;/span&gt;&lt;span style=&quot;color: #4f97d7;&quot;&gt;()&lt;/span&gt; &lt;span style=&quot;color: #4f97d7;&quot;&gt;{&lt;/span&gt;
    &lt;span style=&quot;color: #4f97d7; font-weight: bold;&quot;&gt;let&lt;/span&gt; &lt;span style=&quot;color: #7590db;&quot;&gt;state&lt;/span&gt; = &lt;span style=&quot;color: #bc6ec5;&quot;&gt;{&lt;/span&gt; count: &lt;span style=&quot;color: #a45bad;&quot;&gt;0&lt;/span&gt; &lt;span style=&quot;color: #bc6ec5;&quot;&gt;}&lt;/span&gt;;
    &lt;span style=&quot;color: #4f97d7; font-weight: bold;&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #bc6ec5;&quot;&gt;{&lt;/span&gt;
        state,
        onClick&lt;span style=&quot;color: #2d9574;&quot;&gt;()&lt;/span&gt; &lt;span style=&quot;color: #2d9574;&quot;&gt;{&lt;/span&gt;
            state.count += &lt;span style=&quot;color: #a45bad;&quot;&gt;1&lt;/span&gt;;
        &lt;span style=&quot;color: #2d9574;&quot;&gt;}&lt;/span&gt;,
        render&lt;span style=&quot;color: #2d9574;&quot;&gt;()&lt;/span&gt; &lt;span style=&quot;color: #2d9574;&quot;&gt;{&lt;/span&gt;
            &lt;span style=&quot;color: #4f97d7; font-weight: bold;&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #2d9574;&quot;&gt;`&amp;lt;p&amp;gt;Clicked ${state.count}&amp;lt;/p&amp;gt;`&lt;/span&gt;;
        &lt;span style=&quot;color: #2d9574;&quot;&gt;}&lt;/span&gt;,
    &lt;span style=&quot;color: #bc6ec5;&quot;&gt;}&lt;/span&gt;;
&lt;span style=&quot;color: #4f97d7;&quot;&gt;}&lt;/span&gt;

&lt;span style=&quot;color: #4f97d7; font-weight: bold;&quot;&gt;function&lt;/span&gt; &lt;span style=&quot;color: #bc6ec5; font-weight: bold;&quot;&gt;getInnerText&lt;/span&gt;&lt;span style=&quot;color: #4f97d7;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #7590db;&quot;&gt;html&lt;/span&gt;&lt;span style=&quot;color: #4f97d7;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #4f97d7;&quot;&gt;{&lt;/span&gt;
    &lt;span style=&quot;color: #4f97d7; font-weight: bold;&quot;&gt;return&lt;/span&gt; html.replace&lt;span style=&quot;color: #bc6ec5;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #2d9574;&quot;&gt;/\&amp;lt;p\&amp;gt;|\&amp;lt;\/p\&amp;gt;/&lt;/span&gt;gi, &lt;span style=&quot;color: #2d9574;&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span style=&quot;color: #bc6ec5;&quot;&gt;)&lt;/span&gt;;
&lt;span style=&quot;color: #4f97d7;&quot;&gt;}&lt;/span&gt;

&lt;span style=&quot;color: #4f97d7; font-weight: bold;&quot;&gt;const&lt;/span&gt; &lt;span style=&quot;color: #7590db;&quot;&gt;counter&lt;/span&gt; = createCounter&lt;span style=&quot;color: #4f97d7;&quot;&gt;()&lt;/span&gt;;

assert.equal&lt;span style=&quot;color: #4f97d7;&quot;&gt;(&lt;/span&gt;getInnerText&lt;span style=&quot;color: #bc6ec5;&quot;&gt;(&lt;/span&gt;counter.render&lt;span style=&quot;color: #2d9574;&quot;&gt;()&lt;/span&gt;&lt;span style=&quot;color: #bc6ec5;&quot;&gt;)&lt;/span&gt;, &lt;span style=&quot;color: #2d9574;&quot;&gt;`Clicked 0`&lt;/span&gt;&lt;span style=&quot;color: #4f97d7;&quot;&gt;)&lt;/span&gt;;

counter.onClick&lt;span style=&quot;color: #4f97d7;&quot;&gt;()&lt;/span&gt;;

assert.equal&lt;span style=&quot;color: #4f97d7;&quot;&gt;(&lt;/span&gt;getInnerText&lt;span style=&quot;color: #bc6ec5;&quot;&gt;(&lt;/span&gt;counter.render&lt;span style=&quot;color: #2d9574;&quot;&gt;()&lt;/span&gt;&lt;span style=&quot;color: #bc6ec5;&quot;&gt;)&lt;/span&gt;, &lt;span style=&quot;color: #2d9574;&quot;&gt;`Clicked 1`&lt;/span&gt;&lt;span style=&quot;color: #4f97d7;&quot;&gt;)&lt;/span&gt;;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orgdd459be&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;orgdd459be&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;3.3.&lt;/span&gt; Test Value&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-3-3&quot;&gt;
&lt;p&gt;
The value of a test has to be proposed case by case, it depends on the unit&apos;s
purpose.
&lt;/p&gt;

&lt;p&gt;
Let&apos;s examine the &lt;code&gt;counter&lt;/code&gt; component.
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-js&quot;&gt;&lt;span style=&quot;color: #4f97d7; font-weight: bold;&quot;&gt;function&lt;/span&gt; &lt;span style=&quot;color: #bc6ec5; font-weight: bold;&quot;&gt;createCounter&lt;/span&gt;&lt;span style=&quot;color: #4f97d7;&quot;&gt;()&lt;/span&gt; &lt;span style=&quot;color: #4f97d7;&quot;&gt;{&lt;/span&gt;
    &lt;span style=&quot;color: #4f97d7; font-weight: bold;&quot;&gt;let&lt;/span&gt; &lt;span style=&quot;color: #7590db;&quot;&gt;state&lt;/span&gt; = &lt;span style=&quot;color: #bc6ec5;&quot;&gt;{&lt;/span&gt; count: &lt;span style=&quot;color: #a45bad;&quot;&gt;0&lt;/span&gt; &lt;span style=&quot;color: #bc6ec5;&quot;&gt;}&lt;/span&gt;;
    &lt;span style=&quot;color: #4f97d7; font-weight: bold;&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #bc6ec5;&quot;&gt;{&lt;/span&gt;
        state,
        onClick&lt;span style=&quot;color: #2d9574;&quot;&gt;()&lt;/span&gt; &lt;span style=&quot;color: #2d9574;&quot;&gt;{&lt;/span&gt;
            state.count += &lt;span style=&quot;color: #a45bad;&quot;&gt;1&lt;/span&gt;;
        &lt;span style=&quot;color: #2d9574;&quot;&gt;}&lt;/span&gt;,
        render&lt;span style=&quot;color: #2d9574;&quot;&gt;()&lt;/span&gt; &lt;span style=&quot;color: #2d9574;&quot;&gt;{&lt;/span&gt;
            &lt;span style=&quot;color: #4f97d7; font-weight: bold;&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #2d9574;&quot;&gt;`&amp;lt;p&amp;gt;Clicked ${state.count}&amp;lt;/p&amp;gt;`&lt;/span&gt;;
        &lt;span style=&quot;color: #2d9574;&quot;&gt;}&lt;/span&gt;,
    &lt;span style=&quot;color: #bc6ec5;&quot;&gt;}&lt;/span&gt;;
&lt;span style=&quot;color: #4f97d7;&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
From the source code, we can tell that the counter component&apos;s output is some
HTML code that includes the number of times its &lt;code&gt;onClick&lt;/code&gt; callback has been
called, but in the end, the component&apos;s expected &lt;i&gt;outcome&lt;/i&gt; is this:
&lt;/p&gt;

&lt;p&gt;
to show a user how many times the counter has been clicked.
&lt;/p&gt;

&lt;p&gt;
Note that neither the fact that the counter comes from state or props, nor if
the text is displayed inside a paragraph or a list item matters to the end user.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orgfba5892&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;orgfba5892&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;3.4.&lt;/span&gt; Test Robustness&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-3-4&quot;&gt;
&lt;p&gt;
For every testing approach (testing a unit&apos;s state and testing a unit&apos;s
purpose), ask the following questions:
&lt;/p&gt;

&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;What happens if we change the type of &lt;code&gt;state.count&lt;/code&gt;?&lt;/li&gt;
&lt;li&gt;What happens if we change &lt;code&gt;state.count&lt;/code&gt; for &lt;code&gt;state.clicks&lt;/code&gt;?&lt;/li&gt;
&lt;li&gt;What happens if we pass the count as parameter (prop) instead of storing it as state?&lt;/li&gt;
&lt;li&gt;What happens if we change the word &quot;Clicked&quot; for &quot;Clidkec&quot; in the render method?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
In general, test robustness increases when we test outcomes instead of state.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org8274060&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org8274060&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;4.&lt;/span&gt; When To Test The Redux &lt;code&gt;connect&lt;/code&gt; HOC&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-4&quot;&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org3464608&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org3464608&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;4.1.&lt;/span&gt; Abstract Test Value&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-4-1&quot;&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orgd4a591e&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;orgd4a591e&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;4.1.1.&lt;/span&gt; Does it render?&lt;/h4&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org3748e42&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;org3748e42&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;4.1.2.&lt;/span&gt; Does it generate the desired &lt;code&gt;props&lt;/code&gt;?&lt;/h4&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org5b7a29c&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org5b7a29c&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;4.2.&lt;/span&gt; Testing the &lt;code&gt;mapStateToProps&lt;/code&gt; function&lt;/h3&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org39e840d&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org39e840d&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;5.&lt;/span&gt; How To Test React Components&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-5&quot;&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org5673fdd&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org5673fdd&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;5.1.&lt;/span&gt; Abstract Test Value&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-5-1&quot;&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org9c2232b&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;org9c2232b&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;5.1.1.&lt;/span&gt; Does it render?&lt;/h4&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org1c20b3d&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;org1c20b3d&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;5.1.2.&lt;/span&gt; Does it generate the desired HTML?&lt;/h4&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org03937ba&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org03937ba&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;5.2.&lt;/span&gt; Testing The Outcomes&lt;/h3&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org6c418bd&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org6c418bd&quot;&gt;Final Words&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org6c418bd&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orgdf78788&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgdf78788&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;6.&lt;/span&gt; QA&lt;/h2&gt;
&lt;/div&gt;</content><author><name></name></author><summary type="html">1. Context 1.1. Unit Tests Benefits Ensure code correctness at the lowest level Prevents bug regressions Makes code coverage look cool ðŸ˜Ž Unit testing is the first tool programmers have to ensure the correctness of their programs.</summary></entry></feed>